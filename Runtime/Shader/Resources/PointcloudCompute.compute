#pragma kernel CreatePointcloudFromBuffer1
#pragma kernel CreatePointcloudFromBuffer2
#pragma kernel CreatePointcloudFromBuffer3

//Contains the point cloud, from which we read the point position and colors
//As Unity needs up to three frames to load data into a new buffer, we 
//use a triple buffered swapchain
ByteAddressBuffer _PointSourceBuffer1;
ByteAddressBuffer _PointSourceBuffer2;
ByteAddressBuffer _PointSourceBuffer3;
int _PointCount1;
int _PointCount2;
int _PointCount3;

//Contains the vertice positions and colors of the quads we create
RWByteAddressBuffer _VertexBuffer;

//Contains the face indices of the quads we create
RWByteAddressBuffer _IndexBuffer;

//The Rotation Matrix which we use to rotate orient the quads towards the camera
StructuredBuffer<float4x4> _RotateToCamera;

//Size of the points in Unity dimensions
float _PointScale;

//Just a simple quad mesh
struct _PointQuad
{
    float3 vertex1;
    float3 vertex2;
    float3 vertex3;
    float3 vertex4;

    uint3 triangle1;
    uint3 triangle2;
    
    float2 uv1;
    float2 uv2;
    float2 uv3;
    float2 uv4;
};

// Gets the vertex position (xyz float) from the point source buffer
float3 GetPositionFromPointSourceBuffer(int id, ByteAddressBuffer buffer)
{
    //We access the raw vertex buffer of the mesh vertices. As this buffer is raw, we don't have a handy struct to navigate it
	//and need to find the memory addresses ourselves. Luckily, we create the mesh ourselves, so we know that we have:
	//Vertex = float3 position (3 floats) + unorm8 vertexcolor (1 uint) = 4 * 4 bytes per vertex
    uint pointIndex = id.x * 4 * 4;

	//All values in the Raw vertex buffer can only be retrieved as ints
    uint3 positionRaw = buffer.Load3(pointIndex);

	//Reinterpret the int position into floats
    return asfloat(positionRaw);
}

// Get the 32bit uint from the buffer that contains the colors in RGBA format
uint GetColorFromPointSourceBuffer(int id, ByteAddressBuffer buffer)
{
    uint pointIndex = id.x * 4 * 4 + 12;
    return buffer.Load(pointIndex);
}

//Rotate quad towards camera
_PointQuad RotateQuad(_PointQuad quad, float4x4 rotationMat)
{;
    quad.vertex1 = mul(rotationMat, float4(quad.vertex1, 1.0)).xyz;
    quad.vertex2 = mul(rotationMat, float4(quad.vertex2, 1.0)).xyz;
    quad.vertex3 = mul(rotationMat, float4(quad.vertex3, 1.0)).xyz;
    quad.vertex4 = mul(rotationMat, float4(quad.vertex4, 1.0)).xyz;
    return quad;
}

//Set quad to the point position
_PointQuad TranslateQuad(_PointQuad quad, float3 position)
{
    quad.vertex1 = quad.vertex1 + position;
    quad.vertex2 = quad.vertex2 + position;
    quad.vertex3 = quad.vertex3 + position;
    quad.vertex4 = quad.vertex4 + position;
    return quad;
}

//Create a quad mesh on each point position
_PointQuad CreateQuad(float3 pos, int id, float scale)
{    
    //Create a quad
    _PointQuad outQuad = { float3(scale, scale, 0), float3(-scale, scale, 0), float3(-scale, -scale, 0), float3(scale, -scale, 0), uint3(0, 0, 0), uint3(0, 0, 0), float2(0, 0), float2(0, 0), float2(0, 0), float2(0,0) };
    
    //First rotate the point to face the camera
    outQuad = RotateQuad(outQuad, _RotateToCamera[0]);
    
    //Then position it according to source array
    outQuad = TranslateQuad(outQuad, pos);
       
    //Create our faces. We indice from the top right corner in an anti-clockwise direction
    uint i = id * 4;
    outQuad.triangle1 = uint3(2 + i, 1 + i, 0 + i);
    outQuad.triangle2 = uint3(0 + i, 3 + i, 2 + i);
    
    //Create UV coordinates
    outQuad.uv1 = float2(1, 1);
    outQuad.uv2 = float2(-1, 1);
    outQuad.uv3 = float2(-1, -1);
    outQuad.uv4 = float2(1, -1);
    
    return outQuad;
}

// A quad that is invisible. If we didn't use the maximum amount of points in the buffer
// this is used to erase any quads from the previous call
_PointQuad CreateEmptyQuad()
{
    _PointQuad outQuad = { float3(0, 0, 0), float3(0, 0, 0), float3(0, 0, 0), float3(0, 0, 0), uint3(0, 0, 0), uint3(0, 0, 0), float2(0, 0), float2(0, 0), float2(0, 0), float2(0, 0) };
    return outQuad;
}

// Write a quad to the output buffer that contains the mesh
void StoreQuad(_PointQuad quad, uint color, int id)
{
    //The vertex buffer position for a quad is: Thread ID * 4 (vertices per quad) * 3 (floats per vertice posiion) * 2 (floats per UV) + 1 (uint for color))
    uint vBufferPos = (id * 4 * (3 + 2 + 1));
    
    //Add offset for each vertex + vertexcolor and then multiply by amount of bytes per float (4) to get the final byte adress
    uint vPos1 = (vBufferPos + 0) * 4;
    uint cPos1 = (vBufferPos + 3) * 4;
    uint tPos1 = (vBufferPos + 4) * 4;
    
    uint vPos2 = (vBufferPos + 6) * 4;
    uint cPos2 = (vBufferPos + 9) * 4;
    uint tPos2 = (vBufferPos + 10) * 4;
    
    uint vPos3 = (vBufferPos + 12) * 4;
    uint cPos3 = (vBufferPos + 15) * 4;
    uint tPos3 = (vBufferPos + 16) * 4;

    uint vPos4 = (vBufferPos + 18) * 4;
    uint cPos4 = (vBufferPos + 21) * 4;
    uint tPos4 = (vBufferPos + 22) * 4;;
    
    //The indice buffer byte position for a quad is Thread ID * 2 (indices per quad) * 3 (ints per indice)
    uint iBufferPos = id * 2 * 3;
    
    //Add offset for each indice and then multiply by amount of bytes per uint (4) to get the final byte adress
    uint iPos1 = (iBufferPos + 0) * 4;
    uint iPos2 = (iBufferPos + 3) * 4;
    
    //Write the vertex positions and vertex colors, so that they can be read and used from a vertex/fragment shader
    _VertexBuffer.Store3(vPos1, asuint(quad.vertex1));
    _VertexBuffer.Store(cPos1, color);
    _VertexBuffer.Store2(tPos1, asuint(quad.uv1));
    _VertexBuffer.Store3(vPos2, asuint(quad.vertex2));
    _VertexBuffer.Store(cPos2, color);
    _VertexBuffer.Store2(tPos2, asuint(quad.uv2));
    _VertexBuffer.Store3(vPos3, asuint(quad.vertex3));
    _VertexBuffer.Store(cPos3, color);
    _VertexBuffer.Store2(tPos3, asuint(quad.uv3));
    _VertexBuffer.Store3(vPos4, asuint(quad.vertex4));
    _VertexBuffer.Store(cPos4, color);
    _VertexBuffer.Store2(tPos4, asuint(quad.uv4));

    //Write the face indices
    _IndexBuffer.Store3(iPos1, quad.triangle1);
    _IndexBuffer.Store3(iPos2, quad.triangle2);
}

void CreatePointcloud(uint3 id, ByteAddressBuffer buffer, int pointCount)
{    
    _PointQuad quad;
    uint color = uint(0);
    
    if (id.x < (uint) pointCount)
    {
        float3 position = GetPositionFromPointSourceBuffer(id.x, buffer);
        color = GetColorFromPointSourceBuffer(id.x, buffer);
        quad = CreateQuad(position, id.x, _PointScale);
    }
    else
    {
        quad = CreateEmptyQuad();
    }  
    
    StoreQuad(quad, color, id.x);
}


// For the triple buffered swapchain to work, the script that request the compute shader
// calls these functions in a loop (1-2-3-1-2-3-1...) 

[numthreads(128, 1, 1)]
void CreatePointcloudFromBuffer1(uint3 id : SV_DispatchThreadID)
{
    CreatePointcloud(id, _PointSourceBuffer1, _PointCount1);
}

[numthreads(128, 1, 1)]
void CreatePointcloudFromBuffer2(uint3 id : SV_DispatchThreadID)
{
    CreatePointcloud(id, _PointSourceBuffer2, _PointCount2);
}

[numthreads(128, 1, 1)]
void CreatePointcloudFromBuffer3(uint3 id : SV_DispatchThreadID)
{
    CreatePointcloud(id, _PointSourceBuffer3, _PointCount3);
}



    
    

